package caiseeglise;

//importation des classe 
import caiseeglise.Controlleurs.EgliseController;
import caiseeglise.EgliseForm.EgliseAjoute;
import caiseeglise.EgliseForm.EgliseModifier;
import caiseeglise.EgliseForm.EgliseSupprimer;
import caiseeglise.Models.Eglise;
import caiseeglise.Models.Methodes;
import java.awt.Label;
//importation des object
import java.sql.Connection;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


public class EgliseView extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(EgliseView.class.getName());

    /**
     * Creates new form EgliseView
     */
    public EgliseView() {
        initComponents();
        
        //appel de la fonction affiche
        AfficheEglise();
       
        Style style = new Style();
        
        style.appliquerStyleTableau(tableEglises);
        style.styliserBoutonPrimary(btnajouter);
          style.styliserBoutonDanger(btnsupprimer);
        
        style.appliquerStyleH1(title);
            
        style.styliserTextField(txtideglise);
        
        style.styliserBoutonWarning(btn_mouvement);
               style.styliserBoutonWarning(btnpdf);
         style.styliserBoutonSuccess(btnmodifier);
        
        
    }
 public JPanel getPanelEglise() {
        return this.PanelEglise;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelEglise = new javax.swing.JPanel();
        btnajouter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableEglises = new javax.swing.JTable();
        title = new java.awt.Label();
        btnmodifier = new javax.swing.JButton();
        btnsupprimer = new javax.swing.JButton();
        date_debut = new com.toedter.calendar.JDateChooser();
        date_fin = new com.toedter.calendar.JDateChooser();
        txtideglise = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btn_mouvement = new javax.swing.JButton();
        btnpdf = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnajouter.setText("Ajouter");
        btnajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnajouterActionPerformed(evt);
            }
        });

        tableEglises.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableEglises);

        title.setText("PAGE EGLISE");

        btnmodifier.setText("Modifier");
        btnmodifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmodifierActionPerformed(evt);
            }
        });

        btnsupprimer.setText("Supprimer");
        btnsupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnsupprimerActionPerformed(evt);
            }
        });

        jLabel1.setText("id eglise");

        jLabel2.setText("date debut");

        jLabel3.setText("date de fin");

        btn_mouvement.setText("mouvement");
        btn_mouvement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_mouvementActionPerformed(evt);
            }
        });

        btnpdf.setText("pdf");
        btnpdf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpdfActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelEgliseLayout = new javax.swing.GroupLayout(PanelEglise);
        PanelEglise.setLayout(PanelEgliseLayout);
        PanelEgliseLayout.setHorizontalGroup(
            PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEgliseLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(PanelEgliseLayout.createSequentialGroup()
                        .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtideglise, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addComponent(date_debut, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnpdf))
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addComponent(date_fin, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(btn_mouvement)))
                        .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addGap(86, 86, 86)
                                .addComponent(btnajouter)
                                .addGap(36, 36, 36)
                                .addComponent(btnmodifier, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(79, 79, 79)
                                .addComponent(btnsupprimer))
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(PanelEgliseLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 921, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelEgliseLayout.setVerticalGroup(
            PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelEgliseLayout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelEgliseLayout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)
                        .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnajouter, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnmodifier, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnsupprimer, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(PanelEgliseLayout.createSequentialGroup()
                        .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addGap(0, 15, Short.MAX_VALUE)
                                .addComponent(btnpdf)
                                .addGap(62, 62, 62)
                                .addComponent(btn_mouvement))
                            .addGroup(PanelEgliseLayout.createSequentialGroup()
                                .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtideglise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(date_debut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(PanelEgliseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(date_fin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelEglise, javax.swing.GroupLayout.PREFERRED_SIZE, 965, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(258, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(PanelEglise, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnajouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnajouterActionPerformed
 // Créer une instance de ta fenêtre EgliseAjoute
     // Créer une instance de la fenêtre
      EgliseAjoute egliseAjoute = new EgliseAjoute();
    egliseAjoute.setLocationRelativeTo(null);
    egliseAjoute.setVisible(true);
        
    }//GEN-LAST:event_btnajouterActionPerformed

    private void btnmodifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmodifierActionPerformed
        // TODO add your handling code here:
        EgliseModifier modifier = new EgliseModifier();
         modifier.setLocationRelativeTo(null);
        modifier.setVisible(true);
    }//GEN-LAST:event_btnmodifierActionPerformed

    private void btnsupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnsupprimerActionPerformed
        // TODO add your handling code here:
        EgliseSupprimer supprimer = new EgliseSupprimer();
        supprimer.setLocationRelativeTo(null);
        supprimer.setVisible(true);
    }//GEN-LAST:event_btnsupprimerActionPerformed

    private void btn_mouvementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_mouvementActionPerformed
        // TODO add your handling code here:
        
     // Vérifier les champs
    if (txtideglise.getText().isEmpty()) {
        Methodes.showInfo("Veuillez saisir l'ID de l'église.");
        return;
    }
    if (date_debut.getDate() == null || date_fin.getDate() == null) {
        Methodes.showInfo("Veuillez sélectionner les deux dates.");
        return;
    }

    // Utilisation correcte : idEglise est une chaîne
    String idEglise = txtideglise.getText();

    // ⚠️ Conversion obligatoire vers java.sql.Date
    java.sql.Date debut = new java.sql.Date(date_debut.getDate().getTime());
    java.sql.Date fin = new java.sql.Date(date_fin.getDate().getTime());

    try {
        Connection conn = Methodes.getconnexion();
        if (conn == null) return;

        // Appel à la méthode avec idEglise en tant que chaîne
        Eglise eglise = new Eglise(conn);
        List<Map<String, Object>> data = eglise.getMouvementCaisse(debut, fin, idEglise);

        Map<String, String> titres = Map.of(
            "date", "Date",
            "typeMouvement", "Type de Mouvement",
            "motif", "Motif",
            "montant", "Montant"
        );

        // Affichage des données dans la JTable
        DefaultTableModel model = Methodes.createTableModel(data, titres);
        tableEglises.setModel(model);

    } catch (Exception e) {
        Methodes.showError("Erreur : " + e.getMessage());
    }         
    }//GEN-LAST:event_btn_mouvementActionPerformed

    private void btnpdfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpdfActionPerformed
        // TODO add your handling code here:
    if (txtideglise.getText().isEmpty()) {
        Methodes.showInfo("Veuillez saisir l'ID de l'église.");
        return;
    }
    if (date_debut.getDate() == null || date_fin.getDate() == null) {
        Methodes.showInfo("Veuillez sélectionner les deux dates.");
        return;
    }

    String idEglise = txtideglise.getText();
    java.util.Date utilDateDebut = date_debut.getDate();
    java.util.Date utilDateFin = date_fin.getDate();

    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    String startDateStr = sdf.format(utilDateDebut);
    String endDateStr = sdf.format(utilDateFin);

    try {
        Connection conn = Methodes.getconnexion();
        if (conn == null) {
            Methodes.showError("Connexion à la base de données échouée.");
            return;
        }

        Eglise eglise = new Eglise(conn);
        List<Map<String, Object>> data = eglise.getMouvementCaisse(
            new java.sql.Date(utilDateDebut.getTime()),
            new java.sql.Date(utilDateFin.getTime()),
            idEglise
        );

        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException e) {
            System.err.println("Erreur lors de la fermeture de la connexion: " + e.getMessage());
        }

        List<Entry> entreeEntries = new ArrayList<>();
        List<Entry> sortieEntries = new ArrayList<>();

        for (Map<String, Object> row : data) {
            String typeMouvement = (String) row.get("typeMouvement");

            Object dateObj = row.get("date");
            String date = "";
            if (dateObj instanceof java.sql.Date) {
                date = sdf.format((java.sql.Date) dateObj);
            } else if (dateObj instanceof java.util.Date) {
                date = sdf.format((java.util.Date) dateObj);
            } else if (dateObj instanceof String) {
                date = (String) dateObj;
            } else {
                System.err.println("Format de date inconnu : " + dateObj);
            }

            String motif = (String) row.get("motif");

            double montant = 0.0;
            Object montantObj = row.get("montant");
            if (montantObj instanceof Number) {
                montant = ((Number) montantObj).doubleValue();
            } else if (montantObj != null) {
                try {
                    montant = Double.parseDouble(montantObj.toString().replace(",", "."));
                } catch (NumberFormatException e) {
                    System.err.println("Impossible de parser le montant : " + montantObj + " - " + e.getMessage());
                }
            }

            if ("Entrée".equals(typeMouvement)) {
                entreeEntries.add(new Entry(date, motif, montant));
            } else if ("Sortie".equals(typeMouvement)) {
                sortieEntries.add(new Entry(date, motif, montant));
            }
        }

        PDFCreator pdfCreator = new PDFCreator();
        String baseFilename = "Rapport_Caisse_" + idEglise;
        String directory = ".";
        String filename = pdfCreator.generateUniquePdfName(baseFilename, directory);

        pdfCreator.createFullCaisseReportPdf(filename, startDateStr, endDateStr, entreeEntries, sortieEntries);

        Methodes.showInfo("Le fichier PDF a été généré avec succès à l'emplacement : " + filename);

    } catch (Exception e) {
        Methodes.showError("Erreur lors de la génération du PDF : " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnpdfActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new EgliseView().setVisible(true));
    }
    public void AfficheEglise(){
         try {
            Connection conn = Methodes.getconnexion();
            if (conn == null) return;

            Eglise eglise = new Eglise(conn);
            List<Map<String, Object>> data = eglise.afficheEglises();

            // Traduction des colonnes
            Map<String, String> titres = Map.of(
                "ideglise", "ID",
                "Design", "Nom de l'Église",
                "Solde", "Solde Initial"
            );

            // Afficher
            DefaultTableModel model = Methodes.createTableModel(data, titres);
            tableEglises.setModel(model);

        } catch (SQLException e) {
            Methodes.show("Erreur lors de l'affichage : " + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelEglise;
    private javax.swing.JButton btn_mouvement;
    private javax.swing.JButton btnajouter;
    private javax.swing.JButton btnmodifier;
    private javax.swing.JButton btnpdf;
    private javax.swing.JButton btnsupprimer;
    private com.toedter.calendar.JDateChooser date_debut;
    private com.toedter.calendar.JDateChooser date_fin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableEglises;
    private java.awt.Label title;
    private javax.swing.JTextField txtideglise;
    // End of variables declaration//GEN-END:variables
}
